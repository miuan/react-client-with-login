[{"C:\\Users\\miuan\\projects\\protectql\\react\\src\\index.tsx":"1","C:\\Users\\miuan\\projects\\protectql\\react\\src\\serviceWorker.ts":"2","C:\\Users\\miuan\\projects\\protectql\\react\\src\\App.tsx":"3","C:\\Users\\miuan\\projects\\protectql\\react\\src\\common\\apolloClient.ts":"4","C:\\Users\\miuan\\projects\\protectql\\react\\src\\contexts\\userContext.tsx":"5","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\projects\\edit.tsx":"6","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\projects\\list.tsx":"7","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\user-roles\\list.tsx":"8","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\users\\list.tsx":"9","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\user-roles\\edit.tsx":"10","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\header\\header.tsx":"11","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\header\\user.tsx":"12","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\editor\\edit.tsx":"13","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\filtered-list.tsx":"14","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\connect-base.tsx":"15","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\login\\Register.tsx":"16","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\login\\SignIn.tsx":"17","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\projects\\defaultSchema.ts":"18","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\editor\\form.tsx":"19","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\table.tsx":"20","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\filter-item.tsx":"21","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\common\\loading.tsx":"22","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\common\\unauthorized.tsx":"23","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\editor\\control.tsx":"24","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\common\\DeleteModal.tsx":"25","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\row.tsx":"26","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\row-item.tsx":"27"},{"size":521,"mtime":1608985684918,"results":"28","hashOfConfig":"29"},{"size":5444,"mtime":1608985684925,"results":"30","hashOfConfig":"29"},{"size":3039,"mtime":1608988764625,"results":"31","hashOfConfig":"29"},{"size":1350,"mtime":1608990815091,"results":"32","hashOfConfig":"29"},{"size":2658,"mtime":1608985684918,"results":"33","hashOfConfig":"29"},{"size":1468,"mtime":1608989315674,"results":"34","hashOfConfig":"29"},{"size":1111,"mtime":1608985684922,"results":"35","hashOfConfig":"29"},{"size":1034,"mtime":1608985684923,"results":"36","hashOfConfig":"29"},{"size":2011,"mtime":1608985684924,"results":"37","hashOfConfig":"29"},{"size":981,"mtime":1608985684923,"results":"38","hashOfConfig":"29"},{"size":1478,"mtime":1608985684912,"results":"39","hashOfConfig":"29"},{"size":1440,"mtime":1608985684912,"results":"40","hashOfConfig":"29"},{"size":3527,"mtime":1608989157690,"results":"41","hashOfConfig":"29"},{"size":3292,"mtime":1608985684915,"results":"42","hashOfConfig":"29"},{"size":3730,"mtime":1608989164262,"results":"43","hashOfConfig":"29"},{"size":4840,"mtime":1608989180913,"results":"44","hashOfConfig":"29"},{"size":3792,"mtime":1608989187346,"results":"45","hashOfConfig":"29"},{"size":1206,"mtime":1608985684921,"results":"46","hashOfConfig":"29"},{"size":777,"mtime":1608985684911,"results":"47","hashOfConfig":"29"},{"size":4374,"mtime":1608989268450,"results":"48","hashOfConfig":"29"},{"size":3432,"mtime":1608985684914,"results":"49","hashOfConfig":"29"},{"size":151,"mtime":1608985684909,"results":"50","hashOfConfig":"29"},{"size":233,"mtime":1608985684910,"results":"51","hashOfConfig":"29"},{"size":1797,"mtime":1608985684910,"results":"52","hashOfConfig":"29"},{"size":1920,"mtime":1608989143979,"results":"53","hashOfConfig":"29"},{"size":965,"mtime":1608985684916,"results":"54","hashOfConfig":"29"},{"size":1380,"mtime":1608985684916,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"gre9v5",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"58"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"58"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"129"},"C:\\Users\\miuan\\projects\\protectql\\react\\src\\index.tsx",[],["130","131"],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\serviceWorker.ts",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\App.tsx",["132","133"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom';\r\nimport { ApolloProvider } from '@apollo/client';\r\n\r\nimport { ProjectEdit } from './pages/projects/edit'\r\nimport { ProjectList } from './pages/projects/list'\r\nimport UserList from \"./pages/users/list\";\r\nimport { Header } from './components/header/header'\r\nimport { UserProvider } from './contexts/userContext'\r\n\r\nimport apolloClient from './common/apolloClient'\r\nimport UserRoleList from \"./pages/user-roles/list\";\r\nimport UserRoleEdit from './pages/user-roles/edit'\r\n\r\n\r\n// This site has 3 pages, all of which are rendered\r\n// dynamically in the browser (not server rendered).\r\n//\r\n// Although the page does not ever refresh, notice how\r\n// React Router keeps the URL up to date as you navigate\r\n// through the site. This preserves the browser history,\r\n// making sure things like the back button and bookmarks\r\n// work properly.\r\n\r\nexport default function BasicExample() {\r\n\r\n  return (\r\n    <ApolloProvider client={apolloClient}>\r\n      <UserProvider>\r\n        <Router>\r\n          <div>\r\n              <Header />\r\n            {/*\r\n              A <Switch> looks through all its children <Route>\r\n              elements and renders the first one whose path\r\n              matches the current URL. Use a <Switch> any time\r\n              you have multiple routes, but you want only one\r\n              of them to render at a time\r\n            */}\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Home />\r\n              </Route>\r\n              <Route path=\"/about\">\r\n                <About />\r\n              </Route>\r\n              <Route path=\"/dashboard\">\r\n                <Dashboard />\r\n              </Route>\r\n              <Route path=\"/user/projects/create\" component={ProjectEdit} />\r\n              <Route path=\"/user/projects/:projectId\" component={ProjectEdit} />\r\n              <Route path=\"/user/projects\">\r\n                <ProjectList userId={localStorage.getItem('user.id') || ''}/>\r\n              </Route>\r\n              <Route path=\"/admin/projects\">\r\n                <ProjectList adminMode={true}/>\r\n              </Route>\r\n              <Route path=\"/admin/users\">\r\n                <UserList adminMode={true}/>\r\n              </Route>\r\n              <Route path=\"/admin/roles\">\r\n                <UserRoleList adminMode={true}/>\r\n              </Route>\r\n              <Route path=\"/user/roles/create\" component={UserRoleEdit} />\r\n              <Route path=\"/user/roles/:id\" component={UserRoleEdit} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </UserProvider>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\n// You can think of these components as \"pages\"\r\n// in your app.\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <h2>Home</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <h2>About</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    <div>\r\n      <h2>Dashboard</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\miuan\\projects\\protectql\\react\\src\\common\\apolloClient.ts",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\contexts\\userContext.tsx",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\projects\\edit.tsx",["134","135","136"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport * as _ from 'lodash'\r\nimport gql from \"graphql-tag\";\r\n\r\nimport BaseEdit from \"../../components/editor/edit\"\r\nimport { Form } from \"react-bootstrap\";\r\nimport { TControl } from \"../../components/editor/control\";\r\n\r\n\r\nconst CREATE_MUTATION = gql`\r\n  mutation createProject($userId: ID!, $name: String!, $models: String!) {\r\n    createProject(userId: $userId, name: $name, models: $models) {\r\n      id\r\n      name\r\n      models\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_MUTATION = gql`\r\n  mutation updateProject($id: ID!, $name: String!, $models: String!) {\r\n    updateProject(id: $id, name: $name, models: $models) {\r\n      id\r\n      name\r\n      models\r\n    }\r\n  }\r\n`;\r\n\r\nconst QUERY = gql`\r\n  query project($id:ID){ Project(id:$id) {\r\n      id,\r\n      name,\r\n      models\r\n    }}\r\n`;\r\n\r\nconst ProjectSchemaControl:React.FC<TControl> = ({onChange, value}) => (\r\n    <Form.Control as=\"textarea\" rows={30} {...{onChange, value}} />\r\n)\r\n\r\nexport const ProjectEdit = (data:any) => {\r\n  const projectId = _.get(data, 'match.params.projectId')\r\n  \r\n\r\n  return (\r\n    <>\r\n      <BaseEdit \r\n        id={projectId} \r\n        name={'Project'}\r\n        fields={['name', {\r\n          name:'models',\r\n          label: 'Schema',\r\n          control: ProjectSchemaControl\r\n        }]}\r\n        query={{\r\n            CREATE_MUTATION,\r\n            UPDATE_MUTATION,\r\n            QUERY\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\projects\\list.tsx",["137","138"],"import React, { useState, useEffect } from \"react\";\r\nimport FilteredList from \"../../components/list/filtered-list\";\r\nimport gql from 'graphql-tag';\r\n\r\nconst USER_LIST_QUERY = gql`\r\n  query allProjects($filter: ProjectFilter){ allProjects(filter: $filter) {\r\n      id\r\n      name,\r\n      models\r\n    }}\r\n`;\r\n\r\nconst ADMIN_LIST_QUERY = gql`\r\n  query allProjects($filter: ProjectFilter){ allProjects(filter: $filter) {\r\n      id\r\n      name,\r\n      models,\r\n      user {\r\n          id,\r\n          email\r\n      }\r\n    }}\r\n`;\r\n\r\nconst DELETE_MUTATION = gql`\r\n  mutation deleteProject($id: ID!) {\r\n    deleteProject(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ProjectList: React.FC<{userId?: string, adminMode?: boolean}> = ({userId, adminMode=false}) => {\r\n    return (\r\n        <div>\r\n            <FilteredList \r\n                name={'Projects'}\r\n                fields={['name', 'models']}\r\n                userId={userId} \r\n                adminMode={adminMode}\r\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProjectList","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\user-roles\\list.tsx",["139","140"],"import React, { useState, useEffect } from \"react\";\r\nimport FilteredList from \"../../components/list/filtered-list\";\r\nimport gql from 'graphql-tag';\r\n\r\nconst USER_LIST_QUERY = gql`\r\n  query allUsers($filter: UserFilter){ allUsers(filter: $filter) {\r\n      id\r\n      name,\r\n      models\r\n    }}\r\n`;\r\n\r\nconst ADMIN_LIST_QUERY = gql`\r\n  query allUserRoles($filter: UserRoleFilter) {\r\n  allUserRoles(filter: $filter) {\r\n      id,\r\n      role\r\n    }\r\n  }\r\n`;\r\n\r\nconst DELETE_MUTATION = gql`\r\n  mutation deleteUserRole($id: ID!) {\r\n    deleteUserRole(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const UserRoleList: React.FC<{userId?: string, adminMode?: boolean}> = ({userId, adminMode=false}) => {\r\n    return (\r\n        <div>\r\n            <FilteredList \r\n                name={'Roles'}\r\n                fields={['role']}\r\n                userId={userId} \r\n                adminMode={adminMode}\r\n                queries={{USER_LIST_QUERY, ADMIN_LIST_QUERY, DELETE_MUTATION}} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserRoleList","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\users\\list.tsx",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\user-roles\\edit.tsx",["141","142","143"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport * as _ from 'lodash'\r\nimport gql from \"graphql-tag\";\r\n\r\nimport BaseEdit from \"../../components/editor/edit\"\r\n\r\n\r\nconst CREATE_MUTATION = gql`\r\n  mutation createUserRole($role: String!) {\r\n    createUserRole(role: $role) {\r\n      id\r\n      role\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_MUTATION = gql`\r\n  mutation updateUserRole($id:ID!, $role: String!) {\r\n    updateUserRole(id: $id, role: $role) {\r\n      id\r\n      role\r\n    }\r\n  }\r\n`;\r\n\r\nconst QUERY = gql`\r\n  query userRole($id:ID){ UserRole(id:$id) {\r\n      id,\r\n      role,\r\n    }}\r\n`;\r\n\r\nexport const UserRoleEdit = (data:any) => {\r\n  const id = _.get(data, 'match.params.id')\r\n  \r\n\r\n  return (\r\n    <>\r\n      <BaseEdit \r\n        id={id} \r\n        name={'UserRole'}\r\n        fields={['role']}\r\n        query={{\r\n            CREATE_MUTATION,\r\n            UPDATE_MUTATION,\r\n            QUERY\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserRoleEdit","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\header\\header.tsx",["144","145","146","147","148"],"import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { useUserState, useUserDispatch, USER_INIT, USER_LOGOUT } from '../../contexts/userContext';\r\nimport UserHeaderComponent from './user'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport SignIn from '../../pages/login/SignIn';\r\nimport Register from '../../pages/login/Register';\r\n\r\nexport const Header = () => {\r\n  const user = useUserState()\r\n  const userDispatch = useUserDispatch()\r\n\r\n  const [showSignIn, setShowSignIn] = useState<boolean>(false)\r\n  const [showRegister, setShowRegister] = useState(true)\r\n  \r\n  const handleSignInClose = () => setShowSignIn(false)\r\n  const handleSignInShow = () => setShowSignIn(true)\r\n\r\n  const handleRegisterClose = () => setShowRegister(false)\r\n  const handleRegisterShow = () => setShowRegister(true)\r\n\r\n  const onLogout = () => {\r\n    userDispatch({ type: USER_LOGOUT })\r\n  }\r\n\r\n  if (user.token) {\r\n    return <UserHeaderComponent user={user} onLogout={onLogout} />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <span onClick={handleSignInShow}>SignIn</span> | <span onClick={handleRegisterShow}>Register</span> |\r\n      <Link to=\"/\">Home</Link> |\r\n      <Link to=\"/pricing\">Pricing</Link>\r\n\r\n      <SignIn show={showSignIn} onHide={handleSignInClose}/>\r\n      <Register show={showRegister} onHide={handleRegisterClose}/>\r\n\r\n\r\n\r\n      \r\n    </div>\r\n  )\r\n}","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\header\\user.tsx",["149","150"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\nconst UserHeader = ({user, onLogout}:any) => {\r\n\r\n    return (\r\n        <div>\r\n        <Nav>\r\n            <Nav.Item>\r\n            <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" size=\"sm\" id=\"dropdown-basic\">\r\n            User Menu\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n            <Dropdown.Item href=\"/user/projects\">All Projects</Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item href=\"#/action-2\">User</Dropdown.Item>\r\n            <Dropdown.Item href=\"#/action-3\" onClick={onLogout}>Logout</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n        </Nav.Item>\r\n        \r\n        <Nav.Item>\r\n        \r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" size=\"sm\" id=\"dropdown-basic\">\r\n            Admin\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n            <Dropdown.Item href=\"/admin/projects\">All Projects</Dropdown.Item>\r\n            <Dropdown.Item href=\"/admin/users\">All Users</Dropdown.Item>\r\n            <Dropdown.Item href=\"/admin/roles\">All Roles</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n        </Nav.Item>\r\n\r\n    </Nav>\r\n\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserHeader","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\editor\\edit.tsx",["151","152","153","154","155","156","157","158","159","160","161"],"import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nimport { BaseForm, TBaseForm } from \"./form\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { DEFAULT_SCHEMA } from \"../../pages/projects/defaultSchema\";\r\nimport * as _ from 'lodash'\r\nimport { Alert } from 'react-bootstrap'\r\nimport Unauthorized from '../common/unauthorized'\r\nimport Loading from '../common/loading'\r\nimport { TField, TControlField } from \"./control\";\r\n\r\nexport const getDataFromRaw = (rawData: any) => {\r\n  const rawName = Object.keys(rawData)[0]\r\n  return rawData[rawName]\r\n}\r\n\r\nexport type TBaseEdit = Pick<TBaseForm, 'fields'> & {\r\n  id: string\r\n  name: string\r\n  query: any\r\n}\r\n\r\nexport const BaseEdit:React.FC<TBaseEdit> = ({id: externId, query, name, fields}) => {\r\n  \r\n\r\n  const [localId, setLocalId] = useState(externId);\r\n  const [unauthorized, setUnauthorized] = useState(false);\r\n\r\n  const [model, setModel] = useState({\r\n    name: \"project A\",\r\n    schema: DEFAULT_SCHEMA\r\n  });\r\n\r\n  const { loading, error } = useQuery(query.QUERY, {\r\n    variables: {id: externId},\r\n    skip: !externId,\r\n    onCompleted: (loadedDataRaw: any) =>{\r\n      \r\n      const loadedData = getDataFromRaw(loadedDataRaw)\r\n      \r\n      console.log('Edit:QUERY', {externId, loadedDataRaw, loadedData})\r\n\r\n      if(loadedData){\r\n        const np = fields.reduce((o:any, field: TField)=> {\r\n          const fieldName = (field as TControlField).name ? (field as TControlField).name : field as string\r\n          o[fieldName] = loadedData[fieldName]\r\n          return o\r\n        }, {})\r\n\r\n        setModel(np)\r\n      } else {\r\n        setUnauthorized(true)\r\n      }\r\n    }, onError: (e) => {\r\n      console.log('onError >>> ', e.message)\r\n      if(e.message == 'GraphQL error: Unauhorized'){\r\n        setUnauthorized(true)\r\n      }\r\n      setModel({name:'', schema: ''})\r\n    }\r\n  });\r\n\r\n  const [\r\n    createProjectMutation,\r\n    { loading: createLoading, data: createData, error: createError }\r\n  ] = useMutation(query.CREATE_MUTATION, {\r\n    errorPolicy: \"none\",\r\n    onCompleted: (raw: any) => {\r\n      const data = getDataFromRaw(raw)\r\n      console.log(\"CREATED\", raw, data.id);\r\n      setLocalId(data.id);\r\n    },\r\n    onError: () => {}\r\n  });\r\n\r\n  const [updateProjectMutation, { loading:updateLoading, data: updateData, error:updateError }] = useMutation(\r\n    query.UPDATE_MUTATION,\r\n    {\r\n      errorPolicy: \"none\",\r\n      onCompleted: (data: any) => {\r\n        console.log(\"UPDATED\", data.updateProject.id);\r\n        setLocalId(data.createProject.id);\r\n      },\r\n      onError: () => {}\r\n    }\r\n  );\r\n\r\n  const onUpdate = useCallback((model: any) => {\r\n    console.log('onUpdate >>> ', localId, model)\r\n    if(localId){\r\n        updateProjectMutation({\r\n            variables: {\r\n              id:localId,\r\n              ...model\r\n            }\r\n          });\r\n    } else {\r\n        createProjectMutation({\r\n            variables: {\r\n              userId: localStorage.getItem(\"user.id\"),\r\n              ...model\r\n            }\r\n          });\r\n    }\r\n    \r\n  }, [localId]);\r\n\r\n  if(unauthorized) {\r\n    return (<Unauthorized where={`${name} edit`} />)\r\n  }\r\n\r\n  if(loading) {\r\n    return (<Loading what={name}/>)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>{name} Edit ({externId})</h1>\r\n      {error && <Alert variant={'danger'}>`${error.message}`</Alert>}\r\n      <BaseForm model={model} doUpdate={onUpdate} edit={Boolean(localId)} fields={fields} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BaseEdit","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\filtered-list.tsx",["162","163","164"],"import React, {useState, useEffect, useCallback} from 'react'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport Table, {ITableQueries} from './table'\r\nimport FilterItem from './filter-item'\r\nimport {Navbar, Button} from 'react-bootstrap'\r\nimport './filtered-list.scss'\r\nimport { IFilteredField } from './row-item'\r\n\r\n\r\n\r\nexport interface IProjectFilterList {\r\n    name: string,\r\n    userId?: string \r\n    adminMode?: boolean\r\n    queries: ITableQueries\r\n    fields: IFilteredField[]\r\n}\r\n\r\nconst createFilter = () => {\r\n    let obj:any = []\r\n    obj.name = 'AND'\r\n    return {AND: obj}\r\n}\r\n\r\nconst addAnd = (node:any, filter:any) => {\r\n\r\n    let obj:any = filter\r\n\r\n    if(node.name != 'AND'){\r\n        obj = [obj]\r\n        obj.name = 'AND'\r\n    }\r\n\r\n    node.push(obj)\r\n}\r\n\r\nconst filterDestructNode = (node: any) => {\r\n    let filter = ''\r\n\r\n    for(const n of node) {\r\n        if(n.name && n.length > 0) {\r\n            filter += `,${filterDestructNode(n)}` \r\n        } else {\r\n            filter += `,{${n.filter}}`\r\n        }\r\n    }\r\n\r\n    return `{${node.name}:[${filter.substr(1)}]}`\r\n}\r\n\r\nconst filterDestruct = (filter: any) => {\r\n    let fo = {\r\n        filter: '',\r\n        params: '',\r\n    }\r\n\r\n    fo.filter = filter.AND.length > 0 ? `(filter: ${filterDestructNode(filter.AND)})` : ''\r\n    fo.params = fo.params.length> 2 ? `(${fo.params.substr(1)})` : ''\r\n\r\n    return fo\r\n}\r\n\r\n\r\nexport const FilteredList:React.FC<IProjectFilterList> = ({name, userId, adminMode=false, queries, fields}) => {\r\n\r\n    const [filter, setFilter] = useState(createFilter())\r\n    const history = useHistory()\r\n\r\n    // console.log(filter, listFilter)\r\n    const createDefaultFilter = (userId? : string) => {\r\n        const defaultFilter = createFilter()\r\n        \r\n        if(userId){\r\n            addAnd(defaultFilter.AND, {user_every:{id:userId}})\r\n        }\r\n        \r\n        return defaultFilter\r\n    }\r\n\r\n    const processFilter = (filter: any) => {\r\n        const filterDestructed = filterDestruct(filter)\r\n        \r\n        console.log('processFilter', {filter, filterDestructed})\r\n\r\n        setFilter(filter)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const defaultFilter = createDefaultFilter(userId)\r\n        processFilter(defaultFilter)\r\n        \r\n    }, [userId])\r\n\r\n    const onFilterChange = useCallback((f: string | null) => {\r\n        const defaultFilter = createDefaultFilter(userId)\r\n        \r\n        if(f) {\r\n            addAnd(defaultFilter.AND,f)\r\n        }\r\n        \r\n        processFilter(defaultFilter)\r\n\r\n    }, [userId])\r\n\r\n    const onCreateNew = () => {\r\n        history.push('/user/' + name.toLowerCase() + '/create' )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row-head\">\r\n                <div>\r\n                <h3>{name}</h3>\r\n                </div>\r\n                <FilterItem fields={fields} onChange={onFilterChange} />\r\n                <div>\r\n                <Button onClick={onCreateNew}>Create New</Button>\r\n                </div>\r\n                \r\n            </div>\r\n            <div className=\"row-table\">\r\n           \r\n            <Table name={name} filter={filter} queries={queries} adminMode={adminMode} fields={fields} />\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default FilteredList","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\connect-base.tsx",["165","166","167","168","169","170","171","172","173","174"],"import React, { useState, useEffect } from \"react\";\r\nimport { DropdownButton, Dropdown, Form } from \"react-bootstrap\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getDataFromRaw } from \"../../components/editor/edit\";\r\n\r\nexport const ConnectBase: React.FC<{value:any, names?:any, gql: any, item: any}> = ({value, names, gql, item}) => {\r\n    const element = value\r\n    const name = names.length>1 && names[1]\r\n    const elementTitle = element.push && element.reduce && names.length > 1 ? (element as any[]).reduce((p, e)=>p + `, ${e[name]}`, '').substr(2) : element\r\n  \r\n    const [title, setTitle] = useState(elementTitle)\r\n    const [data, setData] = useState<any[]>([])\r\n  \r\n    const { refetch: userRefetch, loading: userLoading } = useQuery(gql.QUERY, {\r\n      onError: (e) => {\r\n        console.log('ConnectBase:onError >>> ', e.message)\r\n        if(e.message == 'GraphQL error: Unauhorized'){\r\n          // setUnauthorized(true)\r\n        } else {\r\n          // setError(e)\r\n        }\r\n      }, onCompleted: (iraw) => {\r\n        console.log('user: onCompleted', iraw)\r\n        // setLoading(false)\r\n  \r\n        const dataFields = Object.getOwnPropertyNames(iraw)\r\n        if(dataFields.length > 0 && iraw[dataFields[0]].length > 0){\r\n          const raw = iraw[dataFields[0]]\r\n  \r\n          const final = raw.map((r:any)=>{\r\n            return {\r\n              id: r.id,\r\n              checked: title.indexOf(r[name]) !== -1,\r\n              label: r[name]\r\n            }\r\n          })\r\n  \r\n          setData(final)\r\n        } else {\r\n          setData([])\r\n        }\r\n        \r\n      },\r\n    });\r\n  \r\n    const [\r\n      addMutation,\r\n      { loading: addMutaionLoading, data: addMutationData, error: addMutationError }\r\n    ] = useMutation(gql.ADD, {\r\n      errorPolicy: \"none\",\r\n      onCompleted: (raw: any) => {\r\n        const data = getDataFromRaw(raw)\r\n        console.log(\"ADDED\", raw, data.id);\r\n      },\r\n      onError: () => {}\r\n    });\r\n  \r\n    const [\r\n      removeMutation,\r\n      { loading: removeMutaionLoading, data: removeMutationData, error: removeMutationError }\r\n    ] = useMutation(gql.REMOVE, {\r\n      errorPolicy: \"none\",\r\n      onCompleted: (raw: any) => {\r\n        const data = getDataFromRaw(raw)\r\n        console.log(\"REMOVE\", raw, data.id);\r\n      },\r\n      onError: () => {}\r\n    });\r\n  \r\n    const onChecked = (value:any) => {\r\n      const updated = data.map((d:any)=>{\r\n        if(d.label === value.label) {\r\n          d.checked = !d.checked\r\n        }\r\n        return {...d}\r\n      })\r\n  \r\n      const updateTitle = (updated as any[]).reduce((p, e) => {\r\n        if(e.checked) return `${p}, ${e.label}`\r\n        else return p\r\n      }, '').substr(1)\r\n  \r\n      console.log('onChecked:', {updated, value, updateTitle})\r\n  \r\n      if(value.checked){\r\n        addMutation({\r\n          variables: {\r\n            id1: value.id,\r\n            id2: item.id\r\n          }\r\n        });\r\n      } else {\r\n        removeMutation({\r\n          variables: {\r\n            id1: value.id,\r\n            id2: item.id\r\n          }\r\n        });\r\n      }\r\n      \r\n  \r\n      setData(updated)\r\n      setTitle(updateTitle)\r\n    }\r\n    \r\n    // if(element.push && element.reduce && names.length > 1) {\r\n    //   return (<>ahoj: {(element as any[]).reduce((p, e)=>p + e[names[1]], '')}</>)\r\n    // }\r\n  \r\n    return (<DropdownButton id=\"dropdown-basic-button\" title={title}>\r\n        {data && data.map((d:any)=>(\r\n        <Dropdown.Item  onClick={(e:any) => onChecked(d)} >\r\n          <Form.Check \r\n              type=\"checkbox\" \r\n              label={d.label} \r\n              checked={d.checked} />\r\n        </Dropdown.Item>))\r\n        }\r\n      </DropdownButton>)\r\n  }\r\n\r\n  export default ConnectBase","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\login\\Register.tsx",["175","176","177","178"],"import React, { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Modal, Form, Alert, Button } from \"react-bootstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\r\n\r\nconst SIGNIN_MUTATION = gql`\r\n  mutation signUp($email: String!, $pass: String!) {\r\n    createUser(email: $email, password: $pass) {\r\n      id\r\n      token\r\n      roles {\r\n        role\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Register: React.FC<{ show: boolean; onHide: () => void }> = ({\r\n  show,\r\n  onHide: doHide\r\n}) => {\r\n  const [email, setEmail] = useState(\"ahoj\");\r\n  const [pass, setPass] = useState(\"ahoj\");\r\n  const [copy, setCopy] = useState(\"\");\r\n\r\n  const history = useHistory()\r\n  const dispatch = useUserDispatch()\r\n\r\n  const [signIn, { loading, data, error }] = useMutation(SIGNIN_MUTATION, {\r\n    errorPolicy: \"none\",\r\n    onCompleted: (data) => {\r\n      console.log('e,c',data)\r\n      if(data.createUser){\r\n        dispatch({\r\n          type: USER_LOGIN,\r\n          user: data.createUser as User\r\n      })\r\n      onHide()\r\n      history.push('/dashboard')\r\n      } else {\r\n        setInvalidEmail(true)\r\n      }\r\n      \r\n    },\r\n    onError: () => {\r\n      console.log('onError',data)\r\n      setInvalidEmail(true)\r\n    }\r\n  });\r\n\r\n  const [invalidEmail, setInvalidEmail] = useState(false);\r\n  \r\n  const [invalidPass, setInvalidPass] = useState(false);\r\n  const [validPass, setValidPass] = useState(false);\r\n\r\n  const [invalidCopy, setInvalidCopy] = useState(false);\r\n\r\n  const onRegister = async () => {\r\n    if(pass != copy) {\r\n      setInvalidCopy(true)\r\n      return \r\n    }\r\n\r\n    signIn({ variables: { email, pass } })\r\n  };\r\n\r\n  const onHide = () => {\r\n    setPass(\"\");\r\n    setCopy(\"\");\r\n    doHide();\r\n  };\r\n\r\n  const onEmailChange = (event: any) => {\r\n    setEmail(event.target.value);\r\n    setInvalidEmail(false);\r\n  };\r\n\r\n  const onPasswordChange = (event: any) => {\r\n    const pass = event.target.value as string\r\n    const regularExpression = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$/\r\n    setValidPass(regularExpression.test(pass))\r\n\r\n    setPass(pass);\r\n    setInvalidEmail(false);\r\n    setInvalidPass(false);\r\n  };\r\n\r\n  const onCopyChange = (event: any) => {\r\n    const c = event.target.value\r\n    setCopy(c)\r\n    setInvalidEmail(false)\r\n    setInvalidPass(false)\r\n\r\n    if(c == pass){\r\n      setInvalidCopy(false)\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={show} onHide={onHide}>\r\n        <Modal.Header closeButton>\r\n          <div>\r\n            <Modal.Title>SigIn</Modal.Title>\r\n          </div>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          {loading && <div>Loading...</div>}\r\n          <div>\r\n            {invalidEmail && (\r\n              <Alert variant={\"danger\"}>Email is probably taken, did you <Link to=\"/forgotten-password\">forgotten password</Link>?</Alert>\r\n            )}\r\n            {invalidCopy && (\r\n              <Alert variant={\"danger\"}>The retyped password is not the same</Alert>\r\n            )}\r\n          </div>\r\n\r\n          <Form>\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Enter email\"\r\n                onChange={onEmailChange}\r\n                value={email}\r\n                isInvalid={invalidEmail}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                We'll never share your email with anyone else.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={onPasswordChange}\r\n                value={pass}\r\n                isInvalid={invalidPass}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicPassword\">\r\n              <Form.Label>Re-Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                placeholder=\"Retype Password\"\r\n                onChange={onCopyChange}\r\n                value={copy}\r\n                isInvalid={invalidCopy}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" type=\"submit\" onClick={() => onRegister()}>\r\n            Register\r\n          </Button>\r\n          <Button variant=\"secondary\" onClick={onHide}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\login\\SignIn.tsx",["179","180","181","182"],"import React, { useState, useContext } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useLazyQuery } from '@apollo/client'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\r\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\r\n\r\nconst LOGIN_QL = gql`\r\n  query Login($email: String!, $pass: String!) {\r\n    login(email: $email, password:$pass) {\r\n      id,\r\n      token,\r\n      email,\r\n      roles {\r\n        role,\r\n        id\r\n      }\r\n    }\r\n}\r\n`;\r\n\r\nexport const SignIn: React.FC<{ show: boolean, onHide: () => void }> = ({ show, onHide: doHide }) => {\r\n    const [email, setEmail] = useState(localStorage.getItem('user.email') as string)\r\n    const [pass, setPass] = useState('')\r\n\r\n    const [invalidEmail, setInvalidEmail] = useState(false)\r\n    const [invalidPass, setInvalidPass] = useState(false)\r\n\r\n    const history = useHistory()\r\n    const dispatch = useUserDispatch()\r\n\r\n    const [login, { loading, data, error }] = useLazyQuery(LOGIN_QL, {\r\n        onCompleted: (d) => {\r\n            dispatch({\r\n                type: USER_LOGIN,\r\n                user: d.login as User\r\n            })\r\n            onHide()\r\n            history.push('/dashboard')\r\n        }, onError: (error) => {\r\n            setInvalidEmail(true)\r\n            setInvalidPass(true)\r\n            setPass('')\r\n        }\r\n    });\r\n\r\n    const onLogin = async () => {\r\n        login({ variables: { email, pass } })\r\n    }\r\n\r\n    const onEmailChange = (event:any) => {\r\n        setEmail(event.target.value)\r\n        setInvalidEmail(false)\r\n        setInvalidPass(false)\r\n    }\r\n\r\n    const onPasswordChange = (event:any) => {\r\n        setPass(event.target.value)\r\n        setInvalidEmail(false)\r\n        setInvalidPass(false)\r\n    }\r\n\r\n    const onHide = () => {\r\n        setPass('')\r\n        setInvalidEmail(false)\r\n        setInvalidPass(false)\r\n        doHide()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal show={show} onHide={onHide}>\r\n                <Modal.Header closeButton>\r\n                    <div>\r\n                        <Modal.Title>SigIn</Modal.Title>\r\n                    </div>\r\n                    \r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    {loading && <div>Loading...</div>}\r\n                    <div>\r\n                        {invalidPass && <Alert variant={'danger'}>Email or password is not valid</Alert>}\r\n                    </div>\r\n\r\n                    <Form>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={onEmailChange} value={email} isInvalid={invalidEmail}/>\r\n                            <Form.Text className=\"text-muted\">\r\n                                We'll never share your email with anyone else.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={onPasswordChange} value={pass} isInvalid={invalidPass} />\r\n                        </Form.Group>\r\n                        \r\n                       \r\n                    </Form>\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" type=\"submit\" onClick={() => onLogin()}>SigIn</Button>\r\n                    <Button variant=\"secondary\" onClick={onHide}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn","C:\\Users\\miuan\\projects\\protectql\\react\\src\\pages\\projects\\defaultSchema.ts",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\editor\\form.tsx",["183","184","185"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, FormControl, Button } from \"react-bootstrap\";\r\n\r\nimport BaseControl, { TField } from './control'\r\n\r\nexport type TBaseForm = {\r\n  model: any;\r\n  doUpdate: (model:any) => void;\r\n  edit?: boolean\r\n  fields: TField[]\r\n}\r\n\r\nexport const BaseForm: React.FC<TBaseForm> = ({ model, fields, doUpdate, edit = false }) => {\r\n  \r\n  const onUpdate = () => {\r\n      doUpdate(model)\r\n  }\r\n\r\n  const onChange = (field:string, value:any) => {\r\n    model[field] = value\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Form>\r\n        {fields.map((field:any)=>(<BaseControl model={model} field={field} onChange={onChange}/>))}\r\n        <Button onClick={onUpdate}>{edit ? 'Update' : 'Create'}</Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\table.tsx",["186","187","188","189","190","191","192","193","194","195","196"],"import React, {useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { Table as BTable, Button } from 'react-bootstrap'\r\n\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { ListRow } from './row';\r\nimport Loading from '../common/loading';\r\nimport DeleteModal from '../common/DeleteModal';\r\nimport Unauthorized from '../common/unauthorized';\r\nimport { DocumentNode } from 'graphql';\r\nimport { IFilteredField } from './row-item';\r\n\r\nexport interface IFilterWithParams {\r\n  filter?: string\r\n  params?: string\r\n}\r\n\r\nexport interface ITableQueries {\r\n  ADMIN_LIST_QUERY: DocumentNode\r\n  USER_LIST_QUERY: DocumentNode\r\n  DELETE_MUTATION: DocumentNode\r\n}\r\n\r\nexport interface IProjectList {\r\n    userId?: string\r\n    adminMode?: boolean\r\n    filter: any\r\n    queries: ITableQueries\r\n    fields?: IFilteredField[]\r\n    name: string\r\n}\r\n\r\nexport const Table : React.FC<IProjectList> = ({filter, name, adminMode = false, queries, fields}) => {\r\n  const [unauthorized, setUnauthorized] = useState(false)\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n  const [deleteObject, setDeleteObject] = useState(null)\r\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false)\r\n  const [deletingOnDeleteDialog, setDeletingOnDeleteDialog] = useState(false)\r\n\r\n  const [loading, setLoading] = useState(true)\r\n  const [data, setData] = useState<any>([])\r\n  const [error, setError] = useState()\r\n\r\n  const { refetch: userRefetch, loading: userLoading } = useQuery(adminMode? queries.ADMIN_LIST_QUERY : queries.USER_LIST_QUERY, {\r\n    onError: (e) => {\r\n      console.log('onError >>> ', e.message)\r\n      if(e.message == 'GraphQL error: Unauhorized'){\r\n        setUnauthorized(true)\r\n      } else {\r\n        //setError(e.toString())\r\n      }\r\n    }, onCompleted: (d) => {\r\n      console.log('user: onCompleted', d)\r\n      setLoading(false)\r\n\r\n      const dataFields = Object.getOwnPropertyNames(d)\r\n      if(dataFields.length > 0 && d[dataFields[0]].length > 0){\r\n        setData(d[dataFields[0]])\r\n      } else {\r\n        setData([])\r\n      }\r\n      \r\n    },\r\n    variables: {filter}\r\n  });\r\n\r\n\r\n  \r\n\r\n    const [\r\n      deleteProjectMutation,\r\n      { loading: deleteLoading, error: deleteError }\r\n    ] = useMutation(queries.DELETE_MUTATION, {\r\n      errorPolicy: \"none\",\r\n      onCompleted: (data: any) => {\r\n        console.log(\"DELETE\", data.deleteProject);\r\n        onHideDidaloDelete()\r\n        userRefetch()\r\n      },\r\n      onError: (e) => {\r\n        console.log('onError >>> ', e.message)\r\n        if(e.message == 'GraphQL error: Unauhorized'){\r\n          setUnauthorized(true)\r\n        }\r\n      },\r\n    });\r\n\r\n    const onHideDidaloDelete = () => {\r\n      setShowDeleteDialog(false)\r\n      setDeleteObject(null)\r\n    }\r\n\r\n    const onDelete = (obj:any) => {\r\n      setDeletingOnDeleteDialog(false)\r\n      setShowDeleteDialog(true)\r\n      setDeleteObject(obj)\r\n    }\r\n\r\n    const doDelete = (deleteObject: any) => {\r\n      setDeletingOnDeleteDialog(true)\r\n      deleteProjectMutation({\r\n        variables: {\r\n          id: deleteObject.id\r\n        }\r\n      });\r\n    }\r\n    \r\n\r\n    if(unauthorized) {\r\n      return (<Unauthorized where={'projects'} />)\r\n    }\r\n    if (userLoading) return (<Loading what={'projects'} />);\r\n\r\n    return (\r\n        <div>\r\n            \r\n            {/* {error && (<div>{`Error! ${error.message}`}</div>)} */}\r\n            \r\n            <BTable responsive>\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  {fields?.map(f => (f!=='id' && <th>{(f as any).name ? (f as any).name : f}</th>))}\r\n                  {adminMode && <th>User</th>}\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {\r\n                data.length && data.map((projectItem:any)=>(<ListRow name={name} item={projectItem} onDelete={onDelete} fields={fields} />))\r\n              }\r\n              </tbody>\r\n            \r\n            </BTable>\r\n            \r\n            <DeleteModal \r\n                  show={showDeleteDialog} \r\n                  onHide={onHideDidaloDelete}\r\n                  onDelete={doDelete}\r\n                  category={'project'}\r\n                  deleteObject={deleteObject}\r\n                  deleting={deletingOnDeleteDialog}\r\n                  />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\filter-item.tsx",["197","198","199","200","201","202"],"import React, {useState, useEffect, useCallback} from 'react'\r\nimport { Col, Form, Alert, Button, InputGroup, DropdownButton, Dropdown } from \"react-bootstrap\";\r\nimport './filter-item.scss'\r\n\r\nconst basicOptionsName = {\r\n    contains : 'contains',\r\n    not_contains : 'not contains',\r\n    starts_with : 'starts with',\r\n    not_starts_with : 'not starts with',\r\n    ends_with : 'ends with',\r\n    not_ends_with : 'not ends with',\r\n    isEmpty : 'is empty',\r\n}\r\n\r\ntype basicOptionsNameType = 'contains' | 'not_contains' | 'starts_with' | 'not_starts_with' | 'ends_with' | 'not_ends_with' | 'isEmpty'\r\n\r\n\r\n\r\nexport interface IFilterItemParam {\r\n    fields: any[]\r\n    onChange: (filter: string | null) => void\r\n}\r\n\r\n  \r\n\r\nexport const FilterItem: React.FC<IFilterItemParam> = ({fields, onChange}) => {\r\n    const [fieldSelected, setFieldSelected] = useState(fields[0])\r\n    const [optionSelected, setOptionSelected] = useState('contains')\r\n    const [filterText, setFilterText] = useState('')\r\n    const [filter, setFilter] = useState<string|null>('null')\r\n\r\n    const onFieldChange = (field:any) => {\r\n        console.log('onFieldChange', field)\r\n        setFieldSelected(field)\r\n        processFilter(field, optionSelected, filterText)\r\n    }\r\n\r\n    const onOptionChange = (option:any) => {\r\n        console.log('onOptionChange', option)\r\n        setOptionSelected(option)\r\n        processFilter(fieldSelected, option, filterText)\r\n    }\r\n\r\n    const onFilterChange = (e:any) => {\r\n        const text = e.target.value\r\n        console.log('onFilterChange', e, text)\r\n        setFilterText(text)\r\n        processFilter(fieldSelected, optionSelected, text)\r\n    }\r\n\r\n    const doFilter = useCallback((f: string | null) => {\r\n        if(filter != f){\r\n            console.log('useFilter>>>', f)\r\n            setFilter(f)\r\n            onChange(f)\r\n        }\r\n    }, [filter, onChange, setFilter])\r\n\r\n    const processFilter = useCallback((field, option, text) => {\r\n        if(!text && option != 'isEmpty') {\r\n            doFilter(null)\r\n            return\r\n        }\r\n\r\n        const f = {} as any\r\n        f[`${field}_${option}`] = text\r\n        doFilter(f)\r\n\r\n    }, [doFilter] )\r\n\r\n    const gc = (o:any) => {\r\n        const o2 = o\r\n        return () => {onFieldChange(o2)}\r\n    }\r\n\r\n    const go = (o:any) => {\r\n        const o2 = o\r\n        return () => {onOptionChange(o2);}\r\n    }\r\n\r\n\r\n    return (\r\n        <InputGroup className=\"mb-3\">\r\n            <DropdownButton\r\n                className=\"field-option\"\r\n                as={InputGroup.Prepend}\r\n                variant=\"success\"\r\n                title={fieldSelected}\r\n                id=\"input-group-dropdown-1\" >\r\n                    {fields.map((o)=> (<Dropdown.Item key={o} onClick={gc(o)}>{o}</Dropdown.Item>))}\r\n            </DropdownButton>\r\n            <DropdownButton\r\n                className=\"select-option\"\r\n                as={InputGroup.Prepend}\r\n                variant=\"outline-link\"\r\n                title={basicOptionsName[optionSelected as basicOptionsNameType]}\r\n                id=\"input-group-dropdown-1\" >\r\n                    {Object.getOwnPropertyNames(basicOptionsName).map((o)=> (<Dropdown.Item key={o} onClick={go(o)}>{basicOptionsName[o as basicOptionsNameType]}</Dropdown.Item>))}\r\n            </DropdownButton>\r\n            <Form.Control value={filterText} onChange={onFilterChange}/>\r\n        </InputGroup>)\r\n\r\n}\r\n\r\nexport default FilterItem","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\common\\loading.tsx",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\common\\unauthorized.tsx",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\editor\\control.tsx",["203","204"],"import React, { useState, useEffect } from \"react\";\r\nimport { Form, FormControl, Button } from \"react-bootstrap\";\r\n\r\nexport type TControl = {\r\n  placeholder? : string\r\n  onChange: (env: any) => void\r\n  value: string\r\n}\r\n\r\nexport type TControlField = {\r\n  name: string\r\n  label?: string\r\n  placeholder?: string\r\n  control?: React.FC<TControl>\r\n  valid?: string\r\n}\r\n\r\nexport type TField = string | TControlField\r\n\r\nexport interface IBaseControl {\r\n  model: any;\r\n  onChange: (name: string, value:any) => void;\r\n  edit?: boolean\r\n  field: TField\r\n}\r\n\r\nexport const BaseControl: React.FC<IBaseControl> = ({ model, field, onChange, edit = false }) => {\r\n  const name = (field as TControlField).name ? (field as TControlField).name : field as string\r\n  const label = (field as TControlField).label ? (field as TControlField).label : name\r\n  const control = (field as TControlField).control ? (field as TControlField).control : null\r\n\r\n  const [value, setValue] = useState(model[name]);\r\n\r\n  useEffect(()=>{\r\n    setValue(model[name])\r\n  }, [field, model])\r\n\r\n  const onUpdate = (value:string) => {\r\n    const obj = {...model} as any\r\n    obj[name] = value\r\n\r\n    setValue(value)\r\n    onChange(name, value)\r\n  }\r\n\r\n  return (\r\n    <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>{label}</Form.Label>\r\n          {control ? \r\n            control({onChange:(env: any) => onUpdate(env.target.value), value}) :\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              onChange={(env: any) => onUpdate(env.target.value)}\r\n              value={value}\r\n            />\r\n          }\r\n          <FormControl.Feedback type=\"valid\">\r\n            Yeah you did it!\r\n          </FormControl.Feedback>\r\n        </Form.Group>\r\n  );\r\n};\r\n\r\nexport default BaseControl","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\common\\DeleteModal.tsx",["205","206","207","208","209","210","211","212","213","214","215"],"import React, { useState, useContext } from 'react'\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useLazyQuery } from '@apollo/client'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { User, useUserDispatch, USER_LOGIN } from '../../contexts/userContext';\r\nimport { Modal, Form, Button, Alert } from 'react-bootstrap'\r\n\r\nexport interface IDeleteModalParams { \r\n    show: boolean, \r\n    onHide: () => void, \r\n    onDelete: (deleteObject: any) => void,\r\n    category: string,\r\n    deleteObject? : any\r\n    deleting? : boolean\r\n}\r\n\r\nexport const DeleteModal: React.FC<IDeleteModalParams> = ({ show, onHide, onDelete, category, deleteObject, deleting }) => {\r\n\r\n    const onDeleteAction = () => {\r\n        if(!deleting){\r\n            onDelete(deleteObject)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal show={show} onHide={onHide}>\r\n                <Modal.Header closeButton>\r\n                    <div>\r\n                        <Modal.Title>Delete {'>>'} {deleteObject && deleteObject.name}  {'<<'}</Modal.Title>\r\n                    </div>\r\n                    \r\n                </Modal.Header>\r\n\r\n                <Modal.Body>\r\n                    {!deleting ? (<p>Are you sure, you want delete {category} item with name <b>'{deleteObject && deleteObject.name}'</b> and id <i>'{deleteObject && deleteObject.id}'</i></p>) : \r\n                                (<p>Deleting {category} item with name '{deleteObject && deleteObject.name}' and id '{deleteObject && deleteObject.id}' ...</p>) }\r\n                </Modal.Body>\r\n\r\n                <Modal.Footer>\r\n                    <Button disabled={deleting} variant=\"danger\" type=\"submit\" onClick={onDeleteAction}>Delete</Button>\r\n                    <Button disabled={deleting} variant=\"primary\" onClick={onHide}>Close</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteModal","C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\row.tsx",[],"C:\\Users\\miuan\\projects\\protectql\\react\\src\\components\\list\\row-item.tsx",["216","217"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from 'react-bootstrap'\r\nimport './row.scss'\r\n\r\n\r\nexport interface IFilteredFieldDesc {\r\n  name: string\r\n  title?: string\r\n  component?: React.FC<any>\r\n}\r\n\r\nexport type IFilteredField = IFilteredFieldDesc | string\r\n\r\nexport interface IListRowParams {\r\n  item: any\r\n  field: IFilteredField\r\n}\r\n\r\nconst getElementFromField = (item: any, field: IFilteredField) => {\r\n  const fieldDesc = field as IFilteredFieldDesc\r\n\r\n  const names = fieldDesc.name ? fieldDesc.name.split('.') : (field as string).split('.')\r\n  const element = item[names[0]]\r\n\r\n  return {element, name: names[0], names}\r\n}\r\n\r\nexport const ListRowItem: React.FC<IListRowParams> = ({ item, field }) => {\r\n  const {element, name, names} = getElementFromField(item, field)\r\n\r\n  if(!element) {\r\n    return (<>ERR NOT EXIST:{name}</>)\r\n  }\r\n\r\n  if((field as IFilteredFieldDesc).component) {\r\n    const component = (field as IFilteredFieldDesc).component\r\n    return (<>{component && component({value:element, names, item})}</>)\r\n  }\r\n\r\n  if(element.substr && element.length > 50) {\r\n    return (<>{element.substr(0, 47)}...</>)\r\n  }\r\n\r\n  if(element.push && element.reduce && names.length > 1) {\r\n    return (<>{(element as any[]).reduce((p, e)=>p + e[names[1]], '')}</>)\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {element}\r\n    </>\r\n  );\r\n};\r\n\r\n",["218","219"],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"224","severity":1,"message":"228","line":6,"column":3,"nodeType":"226","messageId":"227","endLine":6,"endColumn":7},{"ruleId":"224","severity":1,"message":"229","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"230","line":1,"column":38,"nodeType":"226","messageId":"227","endLine":1,"endColumn":49},{"ruleId":"224","severity":1,"message":"229","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"229","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"229","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"230","line":1,"column":38,"nodeType":"226","messageId":"227","endLine":1,"endColumn":49},{"ruleId":"224","severity":1,"message":"225","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"224","severity":1,"message":"231","line":3,"column":41,"nodeType":"226","messageId":"227","endLine":3,"endColumn":50},{"ruleId":"224","severity":1,"message":"232","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":12},{"ruleId":"224","severity":1,"message":"233","line":6,"column":8,"nodeType":"226","messageId":"227","endLine":6,"endColumn":14},{"ruleId":"224","severity":1,"message":"234","line":7,"column":8,"nodeType":"226","messageId":"227","endLine":7,"endColumn":13},{"ruleId":"224","severity":1,"message":"228","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":14},{"ruleId":"224","severity":1,"message":"235","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":13},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"236","line":4,"column":8,"nodeType":"226","messageId":"227","endLine":4,"endColumn":11},{"ruleId":"224","severity":1,"message":"237","line":7,"column":13,"nodeType":"226","messageId":"227","endLine":7,"endColumn":14},{"ruleId":"238","severity":1,"message":"239","line":57,"column":20,"nodeType":"240","messageId":"241","endLine":57,"endColumn":22},{"ruleId":"224","severity":1,"message":"242","line":66,"column":16,"nodeType":"226","messageId":"227","endLine":66,"endColumn":29},{"ruleId":"224","severity":1,"message":"243","line":66,"column":37,"nodeType":"226","messageId":"227","endLine":66,"endColumn":47},{"ruleId":"224","severity":1,"message":"244","line":66,"column":56,"nodeType":"226","messageId":"227","endLine":66,"endColumn":67},{"ruleId":"224","severity":1,"message":"245","line":77,"column":43,"nodeType":"226","messageId":"227","endLine":77,"endColumn":56},{"ruleId":"224","severity":1,"message":"246","line":77,"column":64,"nodeType":"226","messageId":"227","endLine":77,"endColumn":74},{"ruleId":"224","severity":1,"message":"247","line":77,"column":82,"nodeType":"226","messageId":"227","endLine":77,"endColumn":93},{"ruleId":"248","severity":1,"message":"249","line":107,"column":6,"nodeType":"250","endLine":107,"endColumn":15,"suggestions":"251"},{"ruleId":"224","severity":1,"message":"228","line":2,"column":9,"nodeType":"226","messageId":"227","endLine":2,"endColumn":13},{"ruleId":"224","severity":1,"message":"252","line":5,"column":9,"nodeType":"226","messageId":"227","endLine":5,"endColumn":15},{"ruleId":"238","severity":1,"message":"253","line":29,"column":18,"nodeType":"240","messageId":"241","endLine":29,"endColumn":20},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"254","line":14,"column":22,"nodeType":"226","messageId":"227","endLine":14,"endColumn":33},{"ruleId":"224","severity":1,"message":"255","line":14,"column":44,"nodeType":"226","messageId":"227","endLine":14,"endColumn":55},{"ruleId":"238","severity":1,"message":"239","line":17,"column":22,"nodeType":"240","messageId":"241","endLine":17,"endColumn":24},{"ruleId":"224","severity":1,"message":"256","line":48,"column":18,"nodeType":"226","messageId":"227","endLine":48,"endColumn":35},{"ruleId":"224","severity":1,"message":"257","line":48,"column":43,"nodeType":"226","messageId":"227","endLine":48,"endColumn":58},{"ruleId":"224","severity":1,"message":"258","line":48,"column":67,"nodeType":"226","messageId":"227","endLine":48,"endColumn":83},{"ruleId":"224","severity":1,"message":"259","line":60,"column":18,"nodeType":"226","messageId":"227","endLine":60,"endColumn":38},{"ruleId":"224","severity":1,"message":"260","line":60,"column":46,"nodeType":"226","messageId":"227","endLine":60,"endColumn":64},{"ruleId":"224","severity":1,"message":"261","line":60,"column":73,"nodeType":"226","messageId":"227","endLine":60,"endColumn":92},{"ruleId":"224","severity":1,"message":"262","line":33,"column":35,"nodeType":"226","messageId":"227","endLine":33,"endColumn":40},{"ruleId":"224","severity":1,"message":"263","line":58,"column":10,"nodeType":"226","messageId":"227","endLine":58,"endColumn":19},{"ruleId":"238","severity":1,"message":"253","line":63,"column":13,"nodeType":"240","messageId":"241","endLine":63,"endColumn":15},{"ruleId":"238","severity":1,"message":"239","line":98,"column":10,"nodeType":"240","messageId":"241","endLine":98,"endColumn":12},{"ruleId":"224","severity":1,"message":"264","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":37},{"ruleId":"224","severity":1,"message":"265","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":18},{"ruleId":"224","severity":1,"message":"266","line":32,"column":30,"nodeType":"226","messageId":"227","endLine":32,"endColumn":34},{"ruleId":"224","severity":1,"message":"262","line":32,"column":36,"nodeType":"226","messageId":"227","endLine":32,"endColumn":41},{"ruleId":"224","severity":1,"message":"229","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"225","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":36},{"ruleId":"224","severity":1,"message":"267","line":2,"column":16,"nodeType":"226","messageId":"227","endLine":2,"endColumn":27},{"ruleId":"224","severity":1,"message":"228","line":2,"column":9,"nodeType":"226","messageId":"227","endLine":2,"endColumn":13},{"ruleId":"224","severity":1,"message":"233","line":3,"column":27,"nodeType":"226","messageId":"227","endLine":3,"endColumn":33},{"ruleId":"224","severity":1,"message":"268","line":35,"column":10,"nodeType":"226","messageId":"227","endLine":35,"endColumn":25},{"ruleId":"224","severity":1,"message":"269","line":35,"column":27,"nodeType":"226","messageId":"227","endLine":35,"endColumn":45},{"ruleId":"224","severity":1,"message":"270","line":40,"column":10,"nodeType":"226","messageId":"227","endLine":40,"endColumn":17},{"ruleId":"224","severity":1,"message":"262","line":42,"column":10,"nodeType":"226","messageId":"227","endLine":42,"endColumn":15},{"ruleId":"224","severity":1,"message":"271","line":42,"column":17,"nodeType":"226","messageId":"227","endLine":42,"endColumn":25},{"ruleId":"238","severity":1,"message":"239","line":47,"column":20,"nodeType":"240","messageId":"241","endLine":47,"endColumn":22},{"ruleId":"224","severity":1,"message":"272","line":72,"column":18,"nodeType":"226","messageId":"227","endLine":72,"endColumn":31},{"ruleId":"224","severity":1,"message":"273","line":72,"column":40,"nodeType":"226","messageId":"227","endLine":72,"endColumn":51},{"ruleId":"238","severity":1,"message":"239","line":82,"column":22,"nodeType":"240","messageId":"241","endLine":82,"endColumn":24},{"ruleId":"224","severity":1,"message":"225","line":1,"column":26,"nodeType":"226","messageId":"227","endLine":1,"endColumn":35},{"ruleId":"224","severity":1,"message":"274","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":13},{"ruleId":"224","severity":1,"message":"275","line":2,"column":21,"nodeType":"226","messageId":"227","endLine":2,"endColumn":26},{"ruleId":"224","severity":1,"message":"233","line":2,"column":28,"nodeType":"226","messageId":"227","endLine":2,"endColumn":34},{"ruleId":"238","severity":1,"message":"253","line":52,"column":19,"nodeType":"240","messageId":"241","endLine":52,"endColumn":21},{"ruleId":"238","severity":1,"message":"253","line":60,"column":28,"nodeType":"240","messageId":"241","endLine":60,"endColumn":30},{"ruleId":"224","severity":1,"message":"233","line":2,"column":29,"nodeType":"226","messageId":"227","endLine":2,"endColumn":35},{"ruleId":"248","severity":1,"message":"276","line":36,"column":6,"nodeType":"250","endLine":36,"endColumn":20,"suggestions":"277"},{"ruleId":"224","severity":1,"message":"229","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"224","severity":1,"message":"264","line":1,"column":27,"nodeType":"226","messageId":"227","endLine":1,"endColumn":37},{"ruleId":"224","severity":1,"message":"236","line":2,"column":8,"nodeType":"226","messageId":"227","endLine":2,"endColumn":11},{"ruleId":"224","severity":1,"message":"265","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":18},{"ruleId":"224","severity":1,"message":"278","line":3,"column":20,"nodeType":"226","messageId":"227","endLine":3,"endColumn":32},{"ruleId":"224","severity":1,"message":"279","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":20},{"ruleId":"224","severity":1,"message":"280","line":5,"column":10,"nodeType":"226","messageId":"227","endLine":5,"endColumn":14},{"ruleId":"224","severity":1,"message":"281","line":5,"column":16,"nodeType":"226","messageId":"227","endLine":5,"endColumn":31},{"ruleId":"224","severity":1,"message":"282","line":5,"column":33,"nodeType":"226","messageId":"227","endLine":5,"endColumn":43},{"ruleId":"224","severity":1,"message":"232","line":6,"column":17,"nodeType":"226","messageId":"227","endLine":6,"endColumn":21},{"ruleId":"224","severity":1,"message":"275","line":6,"column":31,"nodeType":"226","messageId":"227","endLine":6,"endColumn":36},{"ruleId":"224","severity":1,"message":"228","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":14},{"ruleId":"224","severity":1,"message":"233","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":16},{"ruleId":"220","replacedBy":"283"},{"ruleId":"222","replacedBy":"284"},"no-native-reassign",["285"],"no-negated-in-lhs",["286"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'useState' is defined but never used.","'useCallback' is defined but never used.","'USER_INIT' is defined but never used.","'Form' is defined but never used.","'Button' is defined but never used.","'Modal' is defined but never used.","'Badge' is defined but never used.","'gql' is defined but never used.","'_' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createLoading' is assigned a value but never used.","'createData' is assigned a value but never used.","'createError' is assigned a value but never used.","'updateLoading' is assigned a value but never used.","'updateData' is assigned a value but never used.","'updateError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'createProjectMutation' and 'updateProjectMutation'. Either include them or remove the dependency array.","ArrayExpression",["287"],"'Navbar' is defined but never used.","Expected '!==' and instead saw '!='.","'userRefetch' is assigned a value but never used.","'userLoading' is assigned a value but never used.","'addMutaionLoading' is assigned a value but never used.","'addMutationData' is assigned a value but never used.","'addMutationError' is assigned a value but never used.","'removeMutaionLoading' is assigned a value but never used.","'removeMutationData' is assigned a value but never used.","'removeMutationError' is assigned a value but never used.","'error' is assigned a value but never used.","'validPass' is assigned a value but never used.","'useContext' is defined but never used.","'useQuery' is defined but never used.","'data' is assigned a value but never used.","'FormControl' is defined but never used.","'showDeleteModal' is assigned a value but never used.","'setShowDeleteModal' is assigned a value but never used.","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.","'deleteLoading' is assigned a value but never used.","'deleteError' is assigned a value but never used.","'Col' is defined but never used.","'Alert' is defined but never used.","React Hook useEffect has a missing dependency: 'name'. Either include it or remove the dependency array.",["288"],"'useLazyQuery' is defined but never used.","'useHistory' is defined but never used.","'User' is defined but never used.","'useUserDispatch' is defined but never used.","'USER_LOGIN' is defined but never used.",["285"],["286"],"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},"Update the dependencies array to be: [createProjectMutation, localId, updateProjectMutation]",{"range":"293","text":"294"},"Update the dependencies array to be: [field, model, name]",{"range":"295","text":"296"},[3092,3101],"[createProjectMutation, localId, updateProjectMutation]",[1034,1048],"[field, model, name]"]